-- Function to handle chat commands
local function onChatMessage(player, message)
    local command, arg = message:match("^(%S+)%s*(.*)")

    if command == "!teleport" then
        -- Execute teleport command
        print(player.Name .. " wants to teleport to " .. arg)
        local targetPlayer = nil
        arg = arg:lower()

        for _, p in ipairs(game.Players:GetPlayers()) do
            if p.Name:lower():sub(1, #arg) == arg then
                targetPlayer = p
                break
            end
        end

        if targetPlayer and targetPlayer.Character then
            local targetCharacter = targetPlayer.Character
            local character = player.Character
            if character then
                local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                local targetHumanoidRootPart = targetCharacter:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart and targetHumanoidRootPart then
                    humanoidRootPart.CFrame = targetHumanoidRootPart.CFrame
                end
            end
        end

    elseif command == "!esp" then
        -- Execute ESP command
        print(player.Name .. " wants to enable ESP.")
        for _, targetPlayer in ipairs(game.Players:GetPlayers()) do
            if targetPlayer.Character then
                addESPToCharacter(targetPlayer.Character)
            end
        end

    elseif command == "!knock" then
        -- Execute knock command
        print(player.Name .. " wants to knock " .. arg)
        local targetPlayer = nil
        arg = arg:lower()

        for _, p in ipairs(game.Players:GetPlayers()) do
            if p.Name:lower():sub(1, #arg) == arg then
                targetPlayer = p
                break
            end
        end

        if targetPlayer and targetPlayer.Character then
            local character = player.Character
            local targetCharacter = targetPlayer.Character

            if character and targetCharacter then
                -- Ensure combat tool is in Backpack
                local backpack = player.Backpack
                local combatTool = backpack:FindFirstChild("CombatTool") -- Replace with the actual name

                if combatTool then
                    -- Equip the combat tool
                    local characterHumanoid = character:FindFirstChildOfClass("Humanoid")
                    if characterHumanoid then
                        characterHumanoid:EquipTool(combatTool)
                    end

                    -- Move to the target
                    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                    local targetHumanoidRootPart = targetCharacter:FindFirstChild("HumanoidRootPart")
                    if humanoidRootPart and targetHumanoidRootPart then
                        humanoidRootPart.CFrame = targetHumanoidRootPart.CFrame

                        -- Perform knock action
                        wait(0.5) -- Allow time for the combat tool to equip

                        -- Simulate knock action (replace with actual knock logic)
                        local args = { [1] = "Knock" } -- Adjust the action as needed
                        game:GetService("ReplicatedStorage"):WaitForChild("MainEvent"):FireServer(unpack(args))
                    end
                else
                    print("Combat tool not found in Backpack.")
                end
            end
        else
            print("Player not found or target has no character.")
        end

    elseif command == "!unknock" then
        -- Stop knocking
        print(player.Name .. " stopped knocking.")

    elseif command == "!autostomp" then
        -- Execute autostomp command
        print(player.Name .. " wants to autostomp.")
        -- Add autostomp logic here

    elseif command == "!unautostomp" then
        -- Stop autostomp
        print(player.Name .. " stopped autostomping.")

    elseif command == "!view" then
        -- Execute view command
        print(player.Name .. " wants to view " .. arg)
        local targetPlayer = nil
        arg = arg:lower()

        for _, p in ipairs(game.Players:GetPlayers()) do
            if p.Name:lower():sub(1, #arg) == arg then
                targetPlayer = p
                break
            end
        end

        if targetPlayer and targetPlayer.Character then
            -- Viewing logic here
            local targetCharacter = targetPlayer.Character
            if targetCharacter then
                game.Workspace.CurrentCamera.CameraSubject = targetCharacter:FindFirstChild("Humanoid") or targetCharacter
            end
        end

    elseif command == "!unview" then
        -- Stop viewing
        print(player.Name .. " stopped viewing.")
        game.Workspace.CurrentCamera.CameraSubject = player.Character
    end
end
