-- Create a function to handle chat commands
local function onChatMessage(player, message)
    local command, arg = message:match("^(%S+)%s*(.*)")
    local knockActive = false
    local autoStompActive = false
    local targetPlayer = nil
    local spectating = false

    if command == "!teleport" then
        -- Execute teleport command
        local foundPlayer = nil
        local partialName = arg:lower()

        for _, p in ipairs(game.Players:GetPlayers()) do
            if string.sub(p.Name:lower(), 1, #partialName) == partialName then
                foundPlayer = p
                break
            end
        end

        if foundPlayer then
            local character = player.Character
            local targetCharacter = foundPlayer.Character

            if character and targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                local targetPosition = targetCharacter.HumanoidRootPart.Position + targetCharacter.HumanoidRootPart.CFrame.LookVector * -0.1
                character:SetPrimaryPartCFrame(CFrame.new(targetPosition, targetCharacter.HumanoidRootPart.Position))
            end
        else
            -- Notify player if target is not found
            print("Error: Player not found!")
        end

    elseif command == "!knock" then
        local foundPlayer = nil
        local partialName = arg:lower()

        for _, p in ipairs(game.Players:GetPlayers()) do
            if string.sub(p.Name:lower(), 1, #partialName) == partialName then
                foundPlayer = p
                break
            end
        end

        if foundPlayer then
            targetPlayer = foundPlayer
            knockActive = true

            local function knockBehindPlayer()
                local backpack = player.Backpack
                local tool = backpack:FindFirstChild("Combat")
                if tool then
                    tool.Parent = player.Character
                    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        humanoid:EquipTool(tool)
                    end
                end

                while knockActive and targetPlayer do
                    local character = player.Character
                    local targetCharacter = targetPlayer.Character

                    if character and targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                        local targetPosition = targetCharacter.HumanoidRootPart.Position + targetCharacter.HumanoidRootPart.CFrame.LookVector * -0.1
                        character:SetPrimaryPartCFrame(CFrame.new(targetPosition, targetCharacter.HumanoidRootPart.Position))
                        wait(0.1)
                        local args = { [1] = "ChargeButton" }
                        game:GetService("ReplicatedStorage"):WaitForChild("MainEvent"):FireServer(unpack(args))
                    else
                        break
                    end

                    -- Stop knocking if target player is knocked down
                    if targetCharacter:FindFirstChildOfClass("Humanoid").Health < 10 then
                        knockActive = false
                    end
                end
            end

            knockBehindPlayer()
        else
            print("Error: Player not found!")
        end

    elseif command == "!unknock" then
        knockActive = false

    elseif command == "!autostomp" then
        autoStompActive = true
        while autoStompActive do
            local args = { [1] = "Stomp" }
            game:GetService("ReplicatedStorage"):WaitForChild("MainEvent"):FireServer(unpack(args))
            wait(0.5)
        end

    elseif command == "!unautostomp" then
        autoStompActive = false

    elseif command == "!view" then
        local foundPlayer = nil
        local partialName = arg:lower()

        for _, p in ipairs(game.Players:GetPlayers()) do
            if string.sub(p.Name:lower(), 1, #partialName) == partialName then
                foundPlayer = p
                break
            end
        end

        if foundPlayer then
            targetPlayer = foundPlayer
            local targetCharacter = foundPlayer.Character

            if not spectating then
                if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                    game.Workspace.CurrentCamera.CameraSubject = targetCharacter:FindFirstChild("Humanoid") or targetCharacter
                    spectating = true
                end
            else
                game.Workspace.CurrentCamera.CameraSubject = player.Character
                spectating = false
            end
        else
            targetPlayer = nil
            if spectating then
                game.Workspace.CurrentCamera.CameraSubject = player.Character
                spectating = false
            end
        end

    elseif command == "!unview" then
        game.Workspace.CurrentCamera.CameraSubject = player.Character
        spectating = false

    elseif command == "!esp" then
        print(player.Name .. " wants to enable ESP.")
        for _, targetPlayer in ipairs(game.Players:GetPlayers()) do
            if targetPlayer ~= player and targetPlayer.Character then
                addESPToCharacter(targetPlayer.Character)
            end
            targetPlayer.CharacterAdded:Connect(function(character)
                addESPToCharacter(character)
            end)
        end
    end
end

-- Listen for PlayerAdded event
game.Players.PlayerAdded:Connect(function(player)
    player.Chatted:Connect(function(message)
        onChatMessage(player, message)
    end)
    player.CharacterAdded:Connect(function(character)
        addESPToCharacter(character)
    end)
end)

-- For players already in the game
for _, player in ipairs(game.Players:GetPlayers()) do
    player.Chatted:Connect(function(message)
        onChatMessage(player, message)
    end)
    player.CharacterAdded:Connect(function(character)
        addESPToCharacter(character)
    end)
end
