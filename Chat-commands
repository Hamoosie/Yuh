-- Function to handle teleport
local function teleportToPlayer(player, partialName)
    local foundPlayer = nil
    partialName = partialName:lower()

    for _, p in ipairs(game.Players:GetPlayers()) do
        if string.sub(p.Name:lower(), 1, #partialName) == partialName then
            foundPlayer = p
            break
        end
    end

    if foundPlayer then
        local character = player.Character
        local targetCharacter = foundPlayer.Character

        if character and targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
            local targetPosition = targetCharacter.HumanoidRootPart.Position + targetCharacter.HumanoidRootPart.CFrame.LookVector * -0.1
            character:SetPrimaryPartCFrame(CFrame.new(targetPosition, targetCharacter.HumanoidRootPart.Position))
        end
    else
        -- Notify player if target is not found
        print("Error: Player not found!")
        -- Replace with actual error notification if available
    end
end

-- Function to activate combat tool
local function activateCombatTool(player)
    local backpack = player.Backpack
    local tool = backpack:FindFirstChild("Combat")
    if tool then
        tool.Parent = player.Character
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:EquipTool(tool)
        end
    end
end

-- Function to handle knock
local function knockBehindPlayer(player, targetPlayer)
    activateCombatTool(player)
    local knockActive = true

    while knockActive and targetPlayer do
        local character = player.Character
        local targetCharacter = targetPlayer.Character

        if character and targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
            local targetPosition = targetCharacter.HumanoidRootPart.Position + targetCharacter.HumanoidRootPart.CFrame.LookVector * -0.1
            character:SetPrimaryPartCFrame(CFrame.new(targetPosition, targetCharacter.HumanoidRootPart.Position))
            wait(0.1)
            local args = { [1] = "ChargeButton" }
            game:GetService("ReplicatedStorage"):WaitForChild("MainEvent"):FireServer(unpack(args))
        else
            knockActive = false
        end

        -- Stop knocking if target player is knocked down
        if targetCharacter:FindFirstChildOfClass("Humanoid").Health < 10 then
            knockActive = false
        end
    end
end

-- Function to handle auto stomp
local autoStompActive = false
local function startAutoStomp(player)
    autoStompActive = true
    while autoStompActive do
        local args = { [1] = "Stomp" }
        game:GetService("ReplicatedStorage"):WaitForChild("MainEvent"):FireServer(unpack(args))
        wait(0.5)
    end
end

-- Function to toggle view
local function toggleView(player, partialName)
    local foundPlayer = nil
    partialName = partialName:lower()

    for _, p in ipairs(game.Players:GetPlayers()) do
        if string.sub(p.Name:lower(), 1, #partialName) == partialName then
            foundPlayer = p
            break
        end
    end

    if foundPlayer then
        local character = player.Character
        local targetCharacter = foundPlayer.Character
        if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
            game.Workspace.CurrentCamera.CameraSubject = targetCharacter:FindFirstChild("Humanoid") or targetCharacter
        end
    else
        game.Workspace.CurrentCamera.CameraSubject = player.Character
    end
end

-- Function to handle chat commands
local function onChatMessage(player, message)
    local command, arg = message:match("^(%S+)%s*(.*)")

    if command == "!teleport" then
        teleportToPlayer(player, arg)

    elseif command == "!knock" then
        local targetPlayer = nil
        for _, p in ipairs(game.Players:GetPlayers()) do
            if p.Name:lower():find(arg:lower()) then
                targetPlayer = p
                break
            end
        end
        if targetPlayer then
            knockBehindPlayer(player, targetPlayer)
        end

    elseif command == "!autostomp" then
        autoStompActive = true
        startAutoStomp(player)

    elseif command == "!unautostomp" then
        autoStompActive = false

    elseif command == "!view" then
        toggleView(player, arg)

    elseif command == "!unview" then
        game.Workspace.CurrentCamera.CameraSubject = player.Character

    elseif command == "!esp" then
        print(player.Name .. " wants to enable ESP.")
        for _, targetPlayer in ipairs(game.Players:GetPlayers()) do
            if targetPlayer ~= player and targetPlayer.Character then
                addESPToCharacter(targetPlayer.Character)
            end
            targetPlayer.CharacterAdded:Connect(function(character)
                addESPToCharacter(character)
            end)
        end
    end
end

-- Listen for PlayerAdded event
game.Players.PlayerAdded:Connect(function(player)
    player.Chatted:Connect(function(message)
        onChatMessage(player, message)
    end)
    player.CharacterAdded:Connect(function(character)
        addESPToCharacter(character)
    end)
end)

-- For players already in the game
for _, player in ipairs(game.Players:GetPlayers()) do
    player.Chatted:Connect(function(message)
        onChatMessage(player, message)
    end)
    player.CharacterAdded:Connect(function(character)
        addESPToCharacter(character)
    end)
end
